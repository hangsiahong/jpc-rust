version: "3.8"

services:
  # SurrealDB with persistence for production
  surrealdb:
    image: surrealdb/surrealdb:latest
    networks:
      - microservices
    ports:
      - "8000:8000"
    command:
      - start
      - --log=info
      - --user=root
      - --pass=root
      - file://data/database.db
    volumes:
      - surrealdb_data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service with multiple replicas
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.user-service
    networks:
      - microservices
    ports:
      - "8080-8082:8080"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=http://surrealdb:8000
      - SERVICE_PORT=8080
    depends_on:
      - surrealdb
    deploy:
      replicas: 3  # Scale user service
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service with multiple replicas
  product-service:
    build:
      context: .
      dockerfile: Dockerfile.product-service
    networks:
      - microservices
    ports:
      - "8083-8085:8081"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=http://surrealdb:8000
      - SERVICE_PORT=8081
    depends_on:
      - surrealdb
    deploy:
      replicas: 3  # Scale product service
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway with load balancing
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    networks:
      - microservices
    ports:
      - "80:8082"     # Expose on port 80 for production
      - "8082:8082"   # Also keep original port for testing
    environment:
      - RUST_LOG=info
      # Service discovery endpoints for load balancing
      - USER_SERVICE_ENDPOINTS=user-service:8080
      - PRODUCT_SERVICE_ENDPOINTS=product-service:8081
    depends_on:
      - user-service
      - product-service
    deploy:
      replicas: 2  # Multiple gateway instances for HA
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      placement:
        constraints:
          - node.role == manager  # Place on manager nodes for stability
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and metrics (optional but recommended)
  prometheus:
    image: prom/prometheus:latest
    networks:
      - microservices
    ports:
      - "9090:9090"
    volumes:
      - prometheus_config:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Log aggregation (optional)
  grafana:
    image: grafana/grafana:latest
    networks:
      - microservices
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  microservices:
    driver: overlay
    attachable: true

volumes:
  surrealdb_data:
  prometheus_config:
  prometheus_data:
  grafana_data:

# Production deployment commands:
# docker stack deploy -c docker-swarm.yml microservices
